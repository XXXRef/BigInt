#include "test_bigint.hpp"

#include <iostream>

#include "bigint.hpp"

using namespace BigInt;

//====================================================================================================
bool test_addition() {
	CBigInt result;
	bool flagIfTestSucceeded = true;
	bool flagIfCorrect;
	//(+) + (+)
	flagIfCorrect = (CBigInt("954684395807878395142927374434593972159572277039504218224869467470126369685")==(CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") + CBigInt("954360394568021349813240139835470129324865753540931872304523498756204522340")));
	if (false== flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (CBigInt("954684395807878395142927374434593972159572277039504218224869467470126369685") == (CBigInt("954360394568021349813240139835470129324865753540931872304523498756204522340") + CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {1}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (CBigInt("1000000000000000000000") == (CBigInt("999999999999999999999") + CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {2}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+big) + (-small)
	flagIfCorrect = (CBigInt("19324857932450297423626300605961") == (CBigInt("19324857932450298347104958735834") + CBigInt("-923478658129873")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {3}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+small) + (-big)
	flagIfCorrect = (CBigInt("-19324857932450297423626300605961") == (CBigInt("923478658129873") + CBigInt("-19324857932450298347104958735834")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {4}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-big) + (+small)
	flagIfCorrect = (CBigInt("-19324857932450297423626300605961") == (CBigInt("-19324857932450298347104958735834")+CBigInt("923478658129873")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {5}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-small) + (+big)
	flagIfCorrect = (CBigInt("19324857932450297423626300605961") == (CBigInt("-923478658129873") + CBigInt("19324857932450298347104958735834")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {6}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+)+0
	flagIfCorrect = (CBigInt("19324857932450297423626300605961") == (CBigInt("19324857932450297423626300605961") + CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {7}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-)+0
	flagIfCorrect = (CBigInt("-19324857932450297423626300605961") == (CBigInt("-19324857932450297423626300605961") + CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {8}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//0+(+)
	flagIfCorrect = (CBigInt("19324857932450297423626300605961") == (CBigInt("0") + CBigInt("19324857932450297423626300605961")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {9}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//0+(-)
	flagIfCorrect = (CBigInt("-19324857932450297423626300605961") == (CBigInt("0") + CBigInt("-19324857932450297423626300605961")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {10}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//0+0
	flagIfCorrect = (CBigInt("0") == (CBigInt("0") + CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {11}" << std::endl;
		flagIfTestSucceeded = false;
	}
	return flagIfTestSucceeded;
}

//====================================================================================================
bool test_subtraction() {
	CBigInt result;
	bool flagIfTestSucceeded = true;
	bool flagIfCorrect;
	//(+big)-(+small)
	flagIfCorrect = (CBigInt("324001239857045329687234599123842834706523498572345920345965464339112486") == (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") - CBigInt("3249582734859")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded=false;
	}
	flagIfCorrect = (CBigInt("99999999999999999999999999") == (CBigInt("100000000000000000000000000") - CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {1}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+small)-(+big)
	flagIfCorrect = (CBigInt("-324001239857045329687234599123842834706523498572345920345965464339112486") == (CBigInt("3249582734859") - CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {2}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-big)-(+small)
	flagIfCorrect = (CBigInt("-324001239857045329687234599123842834706523498572345920345971963504582204") == (CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") - CBigInt("3249582734859")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {3}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-small)-(+big)
	flagIfCorrect = (CBigInt("-324001239857045329687234599123842834706523498572345920345971963504582204") == (CBigInt("-3249582734859") - CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {4}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+big)-(-small)
	flagIfCorrect = (CBigInt("324001239857045329687234599123842834706523498572345920345971963504582204") == (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") - CBigInt("-3249582734859")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {5}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+small)-(-big)
	flagIfCorrect = (CBigInt("324001239857045329687234599123842834706523498572345920345971963504582204") == (CBigInt("3249582734859") - CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {6}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-big)-(-small)
	flagIfCorrect = (CBigInt("-324001239857045329687234599123842834706523498572345920345965464339112486") == (CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") - CBigInt("-3249582734859")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {7}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-small)-(-big)
	flagIfCorrect = (CBigInt("324001239857045329687234599123842834706523498572345920345965464339112486") == (CBigInt("-3249582734859") - CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {8}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//0-0
	flagIfCorrect = (CBigInt("0") == (CBigInt("0") - CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {9}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//0-(+)
	flagIfCorrect = (CBigInt("-324001239857045329687234599123842834706523498572345920345965464339112486") == (CBigInt("0") - CBigInt("324001239857045329687234599123842834706523498572345920345965464339112486")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {10}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//0-(-)
	flagIfCorrect = (CBigInt("324001239857045329687234599123842834706523498572345920345965464339112486") == (CBigInt("0") - CBigInt("-324001239857045329687234599123842834706523498572345920345965464339112486")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {11}" << std::endl;
		flagIfTestSucceeded = false;
	}
	return flagIfTestSucceeded;
}

//====================================================================================================
bool test_multiplication(){
	CBigInt result;
	bool flagIfCorrect;
	bool flagIfTestSucceeded = true;
	//(+>)*(+<)
	flagIfCorrect = (CBigInt("1052868835112364196644177111721585724039315713138872637905244384841807682954608099355") == (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") * CBigInt("3249582734859")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded=false;
	}
	//(+<)*(+>)
	flagIfCorrect = (CBigInt("1052868835112364196644177111721585724039315713138872637905244384841807682954608099355") == (CBigInt("3249582734859") * CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {1}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+)*0
	flagIfCorrect = (CBigInt("0") == (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") * CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {2}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//0*(+)
	flagIfCorrect = (CBigInt("0") == (CBigInt("0") * CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {3}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-)*0
	flagIfCorrect = (CBigInt("0") == (CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") * CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {4}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//0*(-)
	flagIfCorrect = (CBigInt("0") == (CBigInt("0") * CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {5}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+)*1
	flagIfCorrect = (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") == (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") * CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {6}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//1*(+)
	flagIfCorrect = (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") == (CBigInt("1") * CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {7}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-)*1
	flagIfCorrect = (CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") == (CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") * CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {8}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//1*(-)
	flagIfCorrect = (CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") == (CBigInt("1") * CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {9}" << std::endl;
		flagIfTestSucceeded = false;
	}

	return flagIfTestSucceeded;
}

//====================================================================================================
bool test_division() {
	CBigInt result;
	bool flagIfCorrect;
	bool flagIfTestSucceeded=true;
	//(+>)/(+<)
	flagIfCorrect = (CBigInt("99705490302312245581234793749849529719775632135993079886037") == (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") / CBigInt("3249582734859")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+>)/(-<)
	flagIfCorrect = (CBigInt("-99705490302312245581234793749849529719775632135993079886037") == (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") / CBigInt("-3249582734859")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {1}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(->)/(+<)
	flagIfCorrect = (CBigInt("-99705490302312245581234793749849529719775632135993079886038") == (CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") / CBigInt("3249582734859")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {2}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(->)/(-<)
	flagIfCorrect = (CBigInt("1") == (CBigInt("-3") / CBigInt("-5")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {3}" << std::endl;
		flagIfTestSucceeded = false;
		//(-3)/(-5)=1(2)
	}
	//(+<)/(+>)
	flagIfCorrect = (CBigInt("0") == (CBigInt("3249582734859") / CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {4}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+<)/(->)
	flagIfCorrect = (CBigInt("0") == (CBigInt("3249582734859") / CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {5}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-<)/(+>)
	flagIfCorrect = (CBigInt("-1") == (CBigInt("-3249582734859") / CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {6}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-<)/(->)
	flagIfCorrect = (CBigInt("2") == (CBigInt("-5") / CBigInt("-3")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {7}" << std::endl;
		flagIfTestSucceeded = false;
	}

	//(+)/1
	flagIfCorrect = (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") == (CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") / CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {8}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-)/1
	flagIfCorrect = (CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") == (CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") / CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {9}" << std::endl;
		flagIfTestSucceeded = false;
		return false;
	}
	//(+)/0
	flagIfCorrect = false;
	try {
		CBigInt("324001239857045329687234599123842834706523498572345920345968713921847345") / CBigInt("0");
	}
	catch (CBigInt::ExZeroDivision e) {
		flagIfCorrect = true;
	}
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {10}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-)/0
	flagIfCorrect = false;
	try {
		CBigInt("-324001239857045329687234599123842834706523498572345920345968713921847345") / CBigInt("0");
	}
	catch (CBigInt::ExZeroDivision e) {
		flagIfCorrect = true;
	}
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {11}" << std::endl;
		flagIfTestSucceeded = false;
	}
	return flagIfTestSucceeded;
}

//====================================================================================================
bool test_modDivision() {
	CBigInt result;
	bool flagIfCorrect;
	bool flagIfTestSucceeded = true;
	//(+)%(+)
	flagIfCorrect = (CBigInt("2231381926") == (CBigInt("98437059871045981234756023948657230569816340592387435023546") % CBigInt("2394857236")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-)%(+)
	flagIfCorrect = (CBigInt("163475310") == (CBigInt("-98437059871045981234756023948657230569816340592387435023546") % CBigInt("2394857236")));
	
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {1}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+)%(-)
	flagIfCorrect = (CBigInt("2231381926") == (CBigInt("98437059871045981234756023948657230569816340592387435023546") % CBigInt("-2394857236")));
	
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {2}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-)%(-)
	flagIfCorrect = (CBigInt("163475310") == (CBigInt("-98437059871045981234756023948657230569816340592387435023546") % CBigInt("-2394857236")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {3}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (CBigInt("0") == (CBigInt("23456923458701923498013459871340493120353918347523045923854762546") % CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {4}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (CBigInt("0") == (CBigInt("23456923458701923498013459871340493120353918347523045923854762546") % CBigInt("-1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {5}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = false;
	try {
		(CBigInt("23456923458701923498013459871340493120353918347523045923854762546") % CBigInt("0"));
	}
	catch (CBigInt::ExZeroDivision& e) {
		flagIfCorrect = true;
	}
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {6}" << std::endl;
		flagIfTestSucceeded = false;
	}
	return flagIfTestSucceeded;
}

//====================================================================================================
bool test_powering() {
	CBigInt result;
	bool flagIfCorrect;
	bool flagIfTestSucceeded = true;
	//(-)^(+odd)
	flagIfCorrect = (CBigInt("-1564031349") == (CBigInt("-69") ^ CBigInt("5")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-)^(+even)
	flagIfCorrect = (CBigInt("107918163081") == (CBigInt("-69") ^ CBigInt("6")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {1}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+>)^(+<)
	flagIfCorrect = (CBigInt("263319072078723822595510897663430563741366050379827494825133332006178667396295675814158695381322426638089204345448062321477735441033769984129328933672700966282428015118353640892204329197425130808086453818980576765020147840410310984522173848584107270021097026650039642010187290930061127985808939771463222801710076362891923024696919352378023436625964552872952866380875138774756301955061301365490175733460634514421869918312696945481659335307315175559075713783917154286806064981817861351260987775900156327977801468174397358395258021829664813862629000884408765411877681286726818174254463744947785864610788048384393201230022383130206434568439030343986937515176500551906189963389924595938651747656604879402430748907442768089194966911125290031558777650707196489257805471476088832") == (CBigInt("1834768") ^ CBigInt("123")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {2}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+<)^(+>)
	flagIfCorrect = (CBigInt("202282851112053147009569847845628566322658556982082738224386201268444857663564353984893019692270268785505307190293267929180624109098664619301807044731523379365838947183041260301232009266096597306486781117221417578891347235096313538180640815605556014524027282131308568070702721049129037450746001088489007771712228087353053457901620671803212502805306072750927868492051328939966495632745481027336335285171746396574490357675030002631261063273507961216206376246085767662311946517793439307131581758813885470760817749746515389116675644901936364138992048383053359422648139442754033604232167605110608273143369190361194968555548059715510724408468948653934828929247759919251599824940902346744855980678703759239131592996590952111401191779331430098339561779468893827000540765893617497360173281572965237404123960304428206329567270785047776029507296444588106400900816811153798309103874475453020221674154756622547613454472801164617120498452425755286264794105864219917799377782865104712822921805299223114677443847953739216078942644144818063705751593257179943282473134457998128052708194416278539832351589461521907781432344363568329812466716603533977590848290535005507068676537836090369908495459490786430151695358599474506531299465025080253348532688014794588387182581509419352441695853600770819089091953595273070170546151690134218837115515531064292102162468513411778822263836963264212246313121207143144483991286335751858632883672368380858473034953551183157657347561490586876814189282111127106539078068703790569763402443139792852518399828211143357268577727664950268337852235855825476905273556364886179227160737725091323685612755511158173376682578969764099764511641757547065994142814395163871207353708636108715974278643622323095167556385737022079593233796579738720699946102515540028897345711554042103956620018310582376480049489268507899873072272094170128545091219158122298890629086779392635907343330078244358745129876478244120434342448073827492805095431158426835978917500707162164396771438394003290917882324064548152669506810216089816446935776270411894360746743157881544338635980286764599876315696716672905152413249085047437727611570371066252271146060954697784591234570020265350290228593715012055935875834022220808507194421696332261074374653190971008423900048168900649945234605499363032740832924956878358959022961485041388001445514129378568391632880326050325804167444354990105969657579947836135284403592389750366164377573905765993125517147558119431668285492291044653927304695640840772365971196798213503285620424070043032889317061721298249162127840630474436409535051903680864481315559110405128509336077091392963885308922305554358794715256775599514878712978010581410333180757671888619280701288715998850823095852584796375396870371944071237694748300220013448845013848079192280638034933211460620470715457681334365494660270495172168477728430397068150790795024011321768561953212933575411591503551398251756674941688776933840016898061665279269418523075535366619071528723322832659590244226640778897348341502881691281411681190980658004367823989547458058036551582543651662084604090247127124152800720394820083220666603167414899912197649662538093450540632304991833614464189040331505973076509123340427759662945201841004105733445396725876501564458477133274372519539395173814817610043692296155620363987937591133987258468864498406073905728179715036143484262670884707486719184865182930673658141686896031228309961366818895645286750490672867103323292890118785717530651873498604081042055809081574429340687554885673105067969446707510126545112694248310887679911607342300833760549926804065302145986171264916053361773486178424030400510677337300916910250159162775500367034482319425224942849423987960078802719438905890781616622836299714480771793728752130143821866119021947808728032251888760381154510328011960847752308006124107006649095645539978869840500629364738834103148626769685515411911616265668973126528532364262974143228357016509262512187462407174608522130403117918817568538574303923916783690288762912929658288116246808781047864825540561148366252661162931750346291758411519404306293913741739704443968741789254765720877184492083529822653872775855002891001353064892395731818038317936397024118051652029686341459574340594856292812036575367923956405794993653523367198591278322529947048524031253856318213771716793868987920532005708252502853146857081340652371148784962093161927091689571067421481197567162836466603039144244709910246189031092343431842196750431357017356778393509058573268669783339109934763337747806474793894865482686081111088934835232935933790974203645688243707737188117819821247296754105360366579470157020197869118965844987706920796083222999417757935111899494339188580704018367015440414362165974341736494043161377798808172043269364129819108635176171048352632172773424934493857762130622943846767184310847870226954689053673643671936242320619935864652601266846927659373466022939091902860728802140310007956177241407889160857415685023213584416293629437005323755855565272915983594930440775131533577016515369735481973175503292480172863974525055828194102029798429260495256513437906485878165134409325047321630639821861883279080025133926395720934848533991084713369502661725427754624931362212046461234112986191501257181310608869746934020465798774937351594693258920777589065440873297766495488927345026909495404644732193109159795880733237120458164223289724393360955329506409098888407312130953273255495163172626611654222776627180403589514704957708818847388680241304393211579961449196723353980766543782993704489791230253410699631089172614280714078777262176225097881417262143206438257263558401561741355945894854644872462299808089593591507613144283298732308012140352785039679801441533840014493776305424339773591790753122418439571790123060925406415506035179351808097828500845789612256272838272818344440908769038448400298772914770120424764113026684401321910014531929741206864303792146846235903628144443952817688310269919846805761686168879958579946659711559748001229469214088718138333640404763067210219333991415724351226966155135952168258844828610104908145679265606044608740317262352167334834043162779095976082348902973689153456189568583313554368316694431769741504383013498024606564757612791547856026382006361233490189559694367489868837491974980803193520269964259357056500086288434090267231721341715410370457737540689259813426189115688871658578206869387830754773753319076032076602079410696150694912928207752407065342993742385449566049593097515314466236596538373964340959837170577304857457183290989848198150949967843444731176209755943163637903377269066081388994177682788029965938485366096314747106806677068344004279220701200162036769328167081872116071748585638755741795267208540255317813582832680134516218831965344253686820155580695191452833242660839577092801737834446139482560891922284085049409832054437707910391864317477080819684489133628664543673722158193430290971344526236737622490614660567519563175394563705378763646927964841960235088445913249984087021251749987119543115572500614251073783531155926747180051744714014527197326241139963627571774587531427976515616650419346869986905380934594458485903749936359824417192325164682133187129908974164641468235560780940039163182932654593392716396744748940375200564876655503915665791702077233434442111306246671365793760530045691502688806873269864888145075875117919846462042777941166103930320024159733215633210198907086952070889308014996387794659766755685755392873063659366839329182749132030456275897891092738670226414858543205729399070206899063018881177597166909157726041705931862358295544117911236391729353764776524428224554061979310496771687183356159550324910593289118789041267260943011557506205812715319187225628986595337428864235767674023682430742706037077930524847350297068496036649041152143478789427037637468711981732735049221185008734598483813689535297754400784509145516278572393366082529274841042936363514350151353905827800620140945838377083800715800477206096012250806064725143105669190416585845739903390436569942503564206472899250402253132588381125925934752271945001613428464631217361213728403952494832467888211628875213564094062289182434281012243546802459850886834091166172972372213978043202221468417341636724108685745310888395222533678862376795595167534968783669975459591595603934496274520460369123307995047393781839259603514708324961707879867505938939178365712145352261113234892595525492104951613271977812418967656039214504850250260573167331937931123666368384977474718484498882141420014956723909485180361459296562157453638286799552592198321946116423014127873900017424365291988077288944453098540667028489983982359280487052813784939493651460433780275370018779463575276458393493811130579351195547960862186643894661279080823747831328609665611147566532115727159831435987298929186291838532936478109509987555278613861458953113033281739428062917177753728794323312389517022680047523199682643302914267089283283447566155106795615897849545402114576494803723297724970907450925274773117016755609708562148655544846442350478793609216280120161963482086184580569003248526283156462678411233796793643191236101894049582141676884810309014084588132459445781050314473911827290224560749830945456869818417596882765947419630817899428044521744130934448773118031006419016209654016988311991143740716644753909602618371886309865091556796646404323997461755069038378256831657880380304037495080404439573685777194437537940906263263018171008800450011634661137346623958239270510725288662109053546520945934011827194710990115110406855774121459055606874838606230223229396347910414797572525684908464383602564875711215728728629669170725559917219542841758979977844258914587074802014965377437535769558529519904398382876883851714299069329287170435716827855168025651040441789558286966426161470438328386817382405000272701205121028839442948230234779227639217434618503738125487343541065929906678263366070396312620880415647460110830519218546014165923484270883987594382853088531951238412737111160006023304635538975185912491232932304567694981610803859026998473385473760991739689316881370325046185925247747627853479089963072510292967561635050126521") == (CBigInt("69") ^ CBigInt("5434")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {3}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//()^0
	flagIfCorrect = (CBigInt("1") == (CBigInt("-69") ^ CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {4}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(+)^1
	flagIfCorrect = (CBigInt("69") == (CBigInt("69") ^ CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {5}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//(-)^1
	flagIfCorrect = (CBigInt("-69") == (CBigInt("-69") ^ CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {6}" << std::endl;
		flagIfTestSucceeded = false;
	}
	
	return flagIfTestSucceeded;
}

//====================================================================================================
bool test_powMod() {
	CBigInt result;
	bool flagIfCorrect;
	bool flagIfTestSucceeded = true;
	
	flagIfCorrect = (CBigInt("521") == powMod(CBigInt("32345"), CBigInt("23"),CBigInt("546")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}

	flagIfCorrect = (CBigInt("1") == powMod(CBigInt("32345"), CBigInt("0"), CBigInt("546")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {1}" << std::endl;
		flagIfTestSucceeded = false;
	}

	flagIfCorrect = false;
	try{
		flagIfCorrect = (CBigInt("1") == powMod(CBigInt("32345"), CBigInt("0"), CBigInt("0")));
	}
	catch (CBigInt::ExZeroDivision& e) {
		flagIfCorrect = true;
	}
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {2}" << std::endl;
		flagIfTestSucceeded = false;
	}

	flagIfCorrect = (CBigInt("0") == powMod(CBigInt("0"), CBigInt("23"), CBigInt("546")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {3}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//negative base
	flagIfCorrect = (CBigInt("25") == powMod(CBigInt("-32345"), CBigInt("23"), CBigInt("546")));
	auto DEBUG_VAR = powMod(CBigInt("-32345"), CBigInt("23"), CBigInt("546"));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {4}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//negative mod
	flagIfCorrect = (CBigInt("521") == powMod(CBigInt("32345"), CBigInt("23"), CBigInt("-546")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {5}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//negative base, negative mod
	flagIfCorrect = (CBigInt("25") == powMod(CBigInt("-32345"), CBigInt("23"), CBigInt("-546")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {6}" << std::endl;
		flagIfTestSucceeded = false;
	}
	return flagIfTestSucceeded;
}

//====================================================================================================
bool test_misc() {
	CBigInt result;
	bool flagIfCorrect;
	bool flagIfTestSucceeded = true;
	CBigInt par;
	//Operators
	// +=
	par = CBigInt("234752384827346582347562837456");
	flagIfCorrect = (CBigInt("235986404209091606296313869601") == (par += CBigInt("1234019381745023948751032145")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	// -=
	par = CBigInt("9324029546871348592385763003847650348971203491837450");
	flagIfCorrect = (CBigInt("9324029546871348592385761769828268603947254740805305") == (par -= CBigInt("1234019381745023948751032145")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {1}" << std::endl;
		flagIfTestSucceeded = false;
	}
	// *=
	par = CBigInt("12340123984170459810237951039457810459812034971029399480");
	flagIfCorrect = (CBigInt("426486389773223431350244569192765810752423769728584764366824739135847013602283694813720") == (par *= CBigInt("34560948522098104928045602349589")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {2}" << std::endl;
		flagIfTestSucceeded = false;
	}
	// /=
	par = CBigInt("12340013249587213514591245123453245");
	flagIfCorrect = (CBigInt("5153314099241") == (par /= CBigInt("2394578132041904239485")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {3}" << std::endl;
		flagIfTestSucceeded = false;
	}
	// %=

	// ^=

	//Comparisons
	//<
	flagIfCorrect = (true == (CBigInt("213213") < CBigInt("3245927834658")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("3245927834657") < CBigInt("3245927834658")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("-3245927834657") < CBigInt("3245927834658")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("0") < CBigInt("3245927834658")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("-3245927834658") < CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("0") < CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("-1") < CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//>
	flagIfCorrect = (false == (CBigInt("213213") > CBigInt("3245927834658")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (false == (CBigInt("3245927834657") > CBigInt("3245927834658")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (false == (CBigInt("-3245927834657") > CBigInt("3245927834658")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (false == (CBigInt("0") > CBigInt("3245927834658")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (false == (CBigInt("-3245927834658") > CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (false == (CBigInt("0") > CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (false == (CBigInt("-1") > CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//==
	flagIfCorrect = (true == (CBigInt("1273458183421354123") == CBigInt("1273458183421354123")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("-23458726347582374567823") == CBigInt("-23458726347582374567823")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("1") == CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("0") == CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("-1") == CBigInt("-1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//!=
	flagIfCorrect = (true == (CBigInt("239486523849576") != CBigInt("234876527348576")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("239486523849576") != CBigInt("239486523849575")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("2394238475628374576286523849576") != CBigInt("-2394238475628374576286523849576")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("-23894756283457623458234765273485276") != CBigInt("23894756283457623458234765273485276")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("-1") != CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("0") != CBigInt("1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("0") != CBigInt("-1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("1") != CBigInt("-1")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("1") != CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == (CBigInt("-1") != CBigInt("0")));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//Crements
	//++ prefix
	par = CBigInt("1234");
	flagIfCorrect = ((CBigInt("1235") == ++par) && (CBigInt("1235") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {0}" << std::endl;
		flagIfTestSucceeded = false;
	}
	par = CBigInt("-1");
	flagIfCorrect = ((CBigInt("0") == ++par) && (CBigInt("0") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {1}" << std::endl;
		flagIfTestSucceeded = false;
	}
	par = CBigInt("0");
	flagIfCorrect = ((CBigInt("1") == ++par) && (CBigInt("1") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {2}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//++ postfix
	par=CBigInt("1234");
	flagIfCorrect = ((CBigInt("1234") == par++) && (CBigInt("1235")== par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {3}" << std::endl;
		flagIfTestSucceeded = false;
	}
	par = CBigInt("-1");
	flagIfCorrect = ((CBigInt("-1") == par++) && (CBigInt("0") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {4}" << std::endl;
		flagIfTestSucceeded = false;
	}
	par = CBigInt("0");
	flagIfCorrect = ((CBigInt("0") == par++) && (CBigInt("1") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {5}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//-- prefix
	par = CBigInt("1234");
	flagIfCorrect = ((CBigInt("1233") == --par) && (CBigInt("1233") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {6}" << std::endl;
		flagIfTestSucceeded = false;
	}
	par = CBigInt("0");
	flagIfCorrect = ((CBigInt("-1") == --par) && (CBigInt("-1") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {7}" << std::endl;
		flagIfTestSucceeded = false;
	}
	par = CBigInt("1");
	flagIfCorrect = ((CBigInt("0") == --par) && (CBigInt("0") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {8}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//--postfix
	par = CBigInt("1234");
	flagIfCorrect = ((CBigInt("1234") == par--) && (CBigInt("1233") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {9}" << std::endl;
		flagIfTestSucceeded = false;
	}
	par = CBigInt("1");
	flagIfCorrect = ((CBigInt("1") == par--) && (CBigInt("0") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {10}" << std::endl;
		flagIfTestSucceeded = false;
	}
	par = CBigInt("0");
	flagIfCorrect = ((CBigInt("0") == par--) && (CBigInt("-1") == par));
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {11}" << std::endl;
		flagIfTestSucceeded = false;
	}

	//Abs
	flagIfCorrect = (CBigInt("1234") == CBigInt("1234").abs());
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {13}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (CBigInt("1234") == CBigInt("-1234").abs());
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {14}" << std::endl;
		flagIfTestSucceeded = false;
	}
	//isOdd
	flagIfCorrect = (false == CBigInt("1234").isOdd());
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {15}" << std::endl;
		flagIfTestSucceeded = false;
	}
	flagIfCorrect = (true == CBigInt("123").isOdd());
	if (false == flagIfCorrect) {
		std::cout << "[TEST FAILURE] {16}" << std::endl;
		flagIfTestSucceeded = false;
	}
	return flagIfTestSucceeded;
}

//====================================================================================================
void test() {
	bool flagTestSucceeded;
	std::cout << "Performing BigInt tests..." << std::endl;
	//Test addition
	std::cout << "Testing addition... " << std::endl;
	flagTestSucceeded=test_addition();
	std::cout << "\t" << "Addition test " << ((true == flagTestSucceeded) ? ("SUCCESS") : ("FAILURE")) << std::endl;
	//Test subtraction
	std::cout << "Testing subtraction... " << std::endl;
	flagTestSucceeded = test_subtraction();
	std::cout << "\t" << "Subtraction test " << ((true == flagTestSucceeded) ? ("SUCCESS") : ("FAILURE")) << std::endl;
	//Test multiplication
	std::cout << "Testing multiplication... " << std::endl;
	flagTestSucceeded = test_multiplication();
	std::cout << "\t" << "Multiplication test " << ((true == flagTestSucceeded) ? ("SUCCESS") : ("FAILURE")) << std::endl;
	//Test division
	std::cout << "Testing division... " << std::endl;
	flagTestSucceeded = test_division();
	std::cout << "\t" << "Division test " << ((true == flagTestSucceeded) ? ("SUCCESS") : ("FAILURE")) << std::endl;
	//Test division
	std::cout << "Testing mod_division... " << std::endl;
	flagTestSucceeded = test_modDivision();
	std::cout << "\t" << "Division test " << ((true == flagTestSucceeded) ? ("SUCCESS") : ("FAILURE")) << std::endl;
	//Test powering
	std::cout << "Testing powering... " << std::endl;
	flagTestSucceeded = test_powering();
	std::cout << "\t" << "Powering test " << ((true == flagTestSucceeded) ? ("SUCCESS") : ("FAILURE")) << std::endl;
	//Test powMod
	std::cout << "Testing powMod... " << std::endl;
	flagTestSucceeded = test_powMod();
	std::cout << "\t" << "Powmod test " << ((true == flagTestSucceeded) ? ("SUCCESS") : ("FAILURE")) << std::endl;
	//Test additional stuff: comparison, increment/decrement, ...
	std::cout << "Testing additional stuff... " << std::endl;
	flagTestSucceeded = test_misc();
	std::cout << "\t" << "Additional stuff test " << ((true == flagTestSucceeded) ? ("SUCCESS") : ("FAILURE")) << std::endl;
}